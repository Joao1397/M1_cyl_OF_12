/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  12
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#includeEtc "caseDicts/mesh/generation/snappyHexMeshDict.cfg"

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       true;

geometry
{
    banana_stlSurface
    {
        type triSurfaceMesh;
        file "surfacemesh.stl";
    }

    refinementBox
    {
        type searchableBox; // This is the zone where we want to apply the refinement
        min (-2 -2 -2); // Dimensions of geometrical entity
        max (2 2 2); // Dimensions of geometrical entity
    }

};

// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 100000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 2000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 0;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    //nCellsBetweenLevels 1;
    nCellsBetweenLevels 3;

    // Explicit feature edge refinement
    features
    (
        {
            file "surfacemesh.eMesh";
            level 0;
            //level 4;
        }
    );

    // Surface based refinement

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.
    refinementSurfaces
    {
        banana_stlSurface
        {
            level (2 2);
        }

            //- Optional increment (on top of max level) in small gaps
            //gapLevelIncrement 2;

            //- Optional angle to detect small-large cell situation
            //  perpendicular to the surface. Is the angle of face w.r.t.
            //  the local surface normal. Use on flat(ish) surfaces only.
            //  Otherwise leave out or set to negative number.
            //perpendicularAngle 10;

            //- Optional faceZone and (for closed surface) cellZone with
            //  how to select the cells that are in the cellZone
            //  (inside / outside / specified insidePoint)
            //  The orientation of the faceZone is
            //  - if on cellZone(s) : point out of (maximum) cellZone
            //  - if freestanding   : oriented according to surface

            //faceZone sphere;
            //cellZone sphere;
            //mode inside;  //outside/insidePoint

            //- Optional specification of what to do with faceZone faces:
            //      internal : keep them as internal faces (default)
            //      baffle   : create baffles from them. This gives more
            //                 freedom in mesh motion
            //      boundary : create free-standing boundary faces (baffles
            //                 but without the shared points)
            //faceType baffle;
    }

    // Feature angle:
    // - used if min and max refinement level of a surface differ
    // - used if feature snapping (see snapControls below) is used
    //resolveFeatureAngle 10;
    //resolveFeatureAngle 30;		// default
    resolveFeatureAngle 60;		// To avoid too much refinement with curvature		
    //resolveFeatureAngle 90;	

    //- Optional increment (on top of max level) in small gaps
    // gapLevelIncrement 2;

    // Planar angle:
    // - used to determine if surface normals
    //   are roughly the same or opposite. Used
    //      - in proximity refinement
    //      - to decide when to merge free-standing baffles
    //        (if e.g. running in surfaceSimplify mode set this to 180 to
    //         merge all baffles)
    //      - in snapping to avoid snapping to nearest on 'wrong' side
    //        of thin gap
    //
    // If not specified same as resolveFeatureAngle
    planarAngle 30;

    // Region-wise refinement

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   increasing order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.
    refinementRegions
    {
        refinementBox
        {
            mode inside;        	// inside - outside
            levels ((1 1));     	// min max

            //mode distance;        	// 
            //levels ((0.1 1));     	//first number distance normal to the surface in both direction
        }
    }

    // Mesh selection
    // ~~~~~~~~~~~~~~

    locationInMesh (4.0 0.1 0.1); 
    allowFreeStandingZoneFaces true;
}

// Settings for the snapping.
snapControls
{
    // Number of patch smoothing iterations before finding correspondence
    // to surface
    nSmoothPatch 3;	//recommended
    //nSmoothPatch 10;	//improved

    // Maximum relative distance for points to be attracted by surface.
    // True distance is this factor times local maximum edge length.
    // Note: changed(corrected) w.r.t 17x! (17x used 2* tolerance)
    tolerance 2.0;
    //tolerance 1.0;

    // Number of mesh displacement relaxation iterations.
    nSolveIter 30;	//recommended
    //nSolveIter 100;	//improved

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;	//recommended
    //nRelaxIter 10;	//improved	10-20-50

    // Feature snapping

    // Number of feature edge snapping iterations.
    // Leave out altogether to disable.
    nFeatureSnapIter 10;	//recommended
    //nFeatureSnapIter 100;	//improved	50-100

    // Detect (geometric only) features by sampling the surface
    // (default=false).
    implicitFeatureSnap false;

    // Use castellatedMeshControls::features (default = true)
    explicitFeatureSnap true;

    // Detect features between multiple surfaces
    // (only for explicitFeatureSnap, default = false)
    multiRegionFeatureSnap false;

    // wip: disable snapping to opposite near surfaces (revert to 22x behaviour)
    // detectNearSurfacesSnap false;
}

// Settings for the layer addition.
addLayersControls
{
    relativeSizes true;

    // Layer thickness specification. This can be specified in one of following
    // ways:
    // - expansionRatio and finalLayerThickness (cell nearest internal mesh)
    // - expansionRatio and firstLayerThickness (cell on surface)
    // - overall thickness and firstLayerThickness
    // - overall thickness and finalLayerThickness
    // - overall thickness and expansionRatio

    // Expansion factor for layer mesh
    //expansionRatio 1.0;
    expansionRatio 1.2;
    finalLayerThickness 0.5;
    // firstLayerThickness 0.1;
    // thickness 0.5
    minThickness 0.01;

    layers
    {
        banana_stlSurface 
        {
            nSurfaceLayers 5;	//10
        }

    //can add refinement locally
    /*
            maxY
            {
                nSurfaceLayers 1;
                // Per patch layer data
                expansionRatio      1.3;
                finalLayerThickness 0.3;
                minThickness        0.1;
            }
    */

            // Disable any mesh shrinking and layer addition on any point of
            // a patch by setting nSurfaceLayers to 0
    /*
            frozenPatches
            {
                nSurfaceLayers 0;
            }
    */
    }

    nGrow 0;

    // Advanced settings

    // Static analysis of starting mesh

    //featureAngle 0;		//no inflation
    featureAngle 130;		//recommended
    //featureAngle 330;		//improved

    maxFaceThicknessRatio 0.5;
    nSmoothSurfaceNormals 1;
    nSmoothThickness 10;
    minMedialAxisAngle 90;
    minMedianAxisAngle 90;
    maxThicknessToMedialRatio 0.3;
    nSmoothNormals 3;
    slipFeatureAngle 30;
    nRelaxIter 5;
    nBufferCellsNoExtrude 0;
    nLayerIter 50;
    nRelaxedIter 20;
}

// Generic mesh quality settings. At any undoable phase these determine where to undo.
meshQualityControls
{
    #include "meshQualityDict"

    //minFlatness 0.5;

    // Number of error distribution iterations
    nSmoothScale 4;
    // amount to scale back displacement at error points
    errorReduction 0.75;
}

// Advanced

// Debug flags

debugFlags
(
    // mesh            // write intermediate meshes
    // intersections   // write current mesh intersections as .obj files
    // featureSeeds    // write information about explicit feature edge refinement
    // attraction      // write attraction as .obj files
    // layerInfo       // write information about layers
);

// Write flags

writeFlags
(
    scalarLevels    // write volScalarField with cellLevel for postprocessing
    layerSets       // write cellSets, faceSets of faces in layer
    layerFields     // write volScalarField for layer coverage
);

mergeTolerance 1e-6;

// ************************************************************************* //
